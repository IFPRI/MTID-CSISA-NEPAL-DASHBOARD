filter(year == 2020 & month %in% c(1, 2, 3))
missing_real_prices <- percentage_change_CPI_real_df %>%
filter(!(year == 2020 & month %in% c(1, 2, 3)))
missing_real_prices_2020_after <- missing_real_prices %>%
filter(year >= 2020)
missing_real_prices_2020_after_sort <- missing_real_prices_2020_after %>%
arrange(admin1, admin2, market, commodity)
missing_real_prices_2020_after_sort <- missing_real_prices_2020_after_sort %>%
mutate(row_number = row_number()) %>%
select(-row_number)
print(missing_real_prices_2020_after_sort)
earliest_real_values <- missing_real_prices_2020_after_sort %>%
group_by(admin1, admin2, market, commodity) %>%
slice(1) %>%
ungroup() %>%
rename(real_price_reference = real_price)
earliest_real_values <- missing_real_prices_2020_after_sort %>%
group_by(admin1, admin2, market, commodity) %>%
slice(1) %>%
ungroup() %>%
rename(real_price = real_price_reference)
missing_real_prices_2020_after_sort <- missing_real_prices_2020_after_sort %>%
mutate(row_number = row_number()) %>%
select(-row_number)
print(missing_real_prices_2020_after_sort)
earliest_real_values <- missing_real_prices_2020_after_sort %>%
group_by(admin1, admin2, market, commodity) %>%
slice(1) %>%
ungroup() %>%
rename(real_price_reference = real_price)
missing_real_prices
missing_real_prices <- percentage_change_CPI_real_df %>%
filter(!(year == 2020 & month %in% c(1, 2, 3)))
percentage_change_CPI_real_df %>%
filter(!(year == 2020 & month %in% c(1, 2, 3)))
missing_real_prices_2020_after <- missing_real_prices %>%
filter(year >= 2020)
missing_real_prices %>%
filter(year >= 2020)
missing_real_prices_2020_after_sort <- missing_real_prices_2020_after %>%
arrange(admin1, admin2, market, commodity)
missing_real_prices_2020_after %>%
arrange(admin1, admin2, market, commodity)
missing_real_prices_2020_after_sort <- missing_real_prices_2020_after_sort %>%
mutate(row_number = row_number()) %>%
select(-row_number)
missing_real_prices_2020_after_sort %>%
mutate(row_number = row_number()) %>%
select(-row_number)
print(missing_real_prices_2020_after_sort)
rliest_real_values <- missing_real_prices_2020_after_sort %>%
group_by(admin1, admin2, market, commodity) %>%
slice(1) %>%
ungroup() %>%
rename(real_price_reference = real_price)
jan_feb_mar_2020_real_prices
percentage_change_CPI_real_index_early_df <- percentage_change_CPI_real_index_early_df %>%
select(-ends_with("_to_drop"))
mask <- is.na(percentage_change_CPI_real_index_early_df$real_price_reference)
percentage_change_CPI_real_index_df <- percentage_change_CPI_real_df %>%
left_join(avg_real_prices_grouped, by = c('admin1', 'admin2', 'commodity', 'market'))
knitr::opts_chunk$set(echo = TRUE)
csv_data <- read.csv("https://data.humdata.org/dataset/0e8b1b84-8e55-4aec-bc45-0c7d2c92d32e/resource/10bae3d7-82bf-4caf-a216-5fb4a8ff6e43/download/wfp_food_prices_npl.csv")
head(csv_data)
csv_data <- csv_data[-1,]
csv_data
csv_data <- csv_data %>% mutate(ISO3Code = 'NPL')
df <- csv_data
tables <- c('WFP_PRICE_DATA', 'WFP_PRICE_DATA_PROCESSED')
truncate_existing_tables <- function(conn, tables) {
for (table in tables) {
dbExecute(conn, paste0("TRUNCATE TABLE ", table))
}
}
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
conn <- dbConnect(RSQLite::SQLite(), dbname = 'your_database.sqlite')
truncate_existing_tables(conn, tables)
knitr::opts_chunk$set(echo = TRUE)
csv_data <- read.csv("https://data.humdata.org/dataset/0e8b1b84-8e55-4aec-bc45-0c7d2c92d32e/resource/10bae3d7-82bf-4caf-a216-5fb4a8ff6e43/download/wfp_food_prices_npl.csv")
head(csv_data)
csv_data <- csv_data[-1,]
csv_data
csv_data <- csv_data %>% mutate(ISO3Code = 'NPL')
df <- csv_data
tables <- c('WFP_PRICE_DATA', 'WFP_PRICE_DATA_PROCESSED')
truncate_existing_tables <- function(conn, tables) {
for (table in tables) {
dbExecute(conn, paste0("TRUNCATE TABLE ", table))
}
}
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
conn <- dbConnect(RSQLite::SQLite(), dbname = 'your_database.sqlite')
truncate_existing_tables(conn, tables)
percentage_change_CPI_real_index_early_df$real_price_reference[mask] <- percentage_change_CPI_real_index_early_df$real_price_reference_to_drop[mask]
percentage_change_CPI_real_index_df <- percentage_change_CPI_real_df %>%
left_join(avg_real_prices_grouped, by = c('admin1', 'admin2', 'commodity', 'market'))
library(readr)
CPI <- read_csv("data/CPI.csv")
View(CPI)
library(readr)
cpi_df <- read_csv("data/CPI.csv")
View(cpi_df)
cpi_df <- read_csv("data/CPI.csv")
cpi_df <- as.data.frame(result)
cpi_df <- read_csv("data/CPI.csv")
cpi_df <- read_csv("data/CPI.csv")
cpi_df <- read_csv(here("data/CPI.csv"))
View(cpi_df)
View(cpi_df)
cpi_df
cpi_df <- as.data.frame(result)
print(colnames(cpi_df))
dbDisconnect(conn)
percentage_change_CPI_df <- percentage_change_df %>%
left_join(cpi_df, by = c("year" = "CPI_year", "month" = "CPI_month"))
percentage_change_CPI_df <- percentage_change_CPI_df %>%
select(-ends_with("_to_drop"))
percentage_change_CPI_df <- percentage_change_CPI_df %>%
select(-ends_with("_to_drop"))
percentage_change_CPI_df <- percentage_change_CPI_df %>%
select(-ends_with("_to_drop"))
percentage_change_CPI_df <- percentage_change_CPI_df %>%
rename(CPI = value)
percentage_change_CPI_df
percentage_change_CPI_df <- percentage_change_CPI_df %>%
rename(value = CPI)
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
conn <- dbConnect(RSQLite::SQLite(), dbname = 'your_database.sqlite')
insert_dataframe_to_db(conn, percentage_change_CPI_df, 'WFP_PRICE_DATA_PROCESSED')
dbDisconnect(conn)
jan_feb_mar_2020_real_prices <- percentage_change_CPI_real_df %>%
filter(year == 2020 & month %in% c(1, 2, 3))
percentage_change_CPI_real_df = percentage_change_CPI_df
jan_feb_mar_2020_real_prices <- percentage_change_CPI_real_df %>%
filter(year == 2020 & month %in% c(1, 2, 3))
missing_real_prices <- percentage_change_CPI_real_df %>%
filter(!(year == 2020 & month %in% c(1, 2, 3)))
missing_real_prices_2020_after_sort <- missing_real_prices_2020_after %>%
arrange(admin1, admin2, market, commodity)
missing_real_prices_2020_after_sort <- missing_real_prices_2020_after_sort %>%
mutate(row_number = row_number()) %>%
select(-row_number)
print(missing_real_prices_2020_after_sort)
earliest_real_values <- missing_real_prices_2020_after_sort %>%
group_by(admin1, admin2, market, commodity) %>%
slice(1) %>%
ungroup() %>%
rename(real_price_reference = real_price)
earliest_real_values <- missing_real_prices_2020_after_sort %>%
group_by(admin1, admin2, market, commodity) %>%
slice(1) %>%
ungroup() %>%
rename(real_price = real_price_reference)
conn <- dbConnect(RSQLite::SQLite(), dbname = 'your_database.sqlite')
insert_dataframe_to_db(conn, earliest_real_values, 'WFP_PRICE_DATA_PROCESSED_MISSING_REAL_REFERENCE')
avg_real_prices_grouped <- jan_feb_mar_2020_real_prices %>%
group_by(admin1, admin2, market, commodity) %>%
summarise(real_price_reference = mean(real_price, na.rm = TRUE)) %>%
ungroup()
percentage_change_CPI_real_index_df <- percentage_change_CPI_real_df %>%
left_join(avg_real_prices_grouped, by = c('admin1', 'admin2', 'commodity', 'market'))
percentage_change_CPI_real_index_df <- percentage_change_CPI_real_index_df %>%
select(-ends_with("_to_drop"))
insert_dataframe_to_db(conn, percentage_change_CPI_real_index_df, 'WFP_PRICE_DATA_PROCESSED_REAL_REFERENCE1')
percentage_change_CPI_real_index_early_df <- percentage_change_CPI_real_index_df %>%
left_join(
earliest_real_values %>% select(admin1, admin2, commodity, market, real_price_reference),
by = c('admin1', 'admin2', 'commodity', 'market'),
suffix = c("", "_to_drop")
)
percentage_change_CPI_real_index_early_df <- percentage_change_CPI_real_index_early_df %>%
select(-ends_with("_to_drop"))
knitr::opts_chunk$set(echo = TRUE)
library(odbc) # Contains drivers to connect a database
library(odbc) # Contains drivers to connect a database
install.packages("odbc")
library(odbc) # Contains drivers to connect a database
library(DBI)  # Contains function to interact with database
library(RSQLite)
library(dbplyr)
library(dplyr)
portaldb <- dbConnect()
con ï¼œ- DBI::dbConnect(drv = odbc::odbc(),
knitr::opts_chunk$set(echo = TRUE)
library(DBI)
library(RSQLite)
library(dbplyr)
library(dplyr)
portaldb <- dbConnect()
con <- DBI::dbConnect(drv = odbc::odbc(),
Driver = "Amazon_Redshift",
Server = "nepal-dashboard-db.c5nzpjrxfrcj.us-east-1.rds.amazonaws.com",
Database = "fsp_data",
user = "admin", #optional
password = "Q3aikjweEVYoox6yyZhi") #optional
csv_data <- read.csv("https://data.humdata.org/dataset/0e8b1b84-8e55-4aec-bc45-0c7d2c92d32e/resource/10bae3d7-82bf-4caf-a216-5fb4a8ff6e43/download/wfp_food_prices_npl.csv")
library(readxl)
rm(list = ls())
library(readxl)
library(tidyverse, dplyr)
library(c(tidyverse, dplyr))
library(pacman)
install.packages("pacman")
library(pacman)
p_load(tidyverse, dplyr)
p_load(tidyverse, dplyr, readxl, flextable)
csv_data <- read.csv("https://data.humdata.org/dataset/0e8b1b84-8e55-4aec-bc45-0c7d2c92d32e/resource/10bae3d7-82bf-4caf-a216-5fb4a8ff6e43/download/wfp_food_prices_npl.csv")
View(csv_data)
head(csv_data)
csv_data <- csv_data[-1,]
csv_data
csv_data <- csv_data %>% mutate(ISO3Code = 'NPL')
df <- csv_data
csv_data <- csv_data %>% mutate(ISO3Code = 'NPL')
df <- csv_data
tables <- c('WFP_PRICE_DATA', 'WFP_PRICE_DATA_PROCESSED')
truncate_existing_tables <- function(conn, tables) {
for (table in tables) {
dbExecute(conn, paste0("TRUNCATE TABLE ", table))
}
}
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
conn <- dbConnect(RSQLite::SQLite(), dbname = 'your_database.sqlite')
truncate_existing_tables(conn, tables)
install.packages("truncate")
cat("Number of rows:", nrow(csv_data), "\n")
cat("Data type of 'price':", class(csv_data$price), "\n")
csv_data <- csv_data %>% filter(price != 0.0 & priceflag == "actual")
cat("Number of rows after filtering:", nrow(df), "\n")
percentage_change_df <- df
percentage_change_df <- percentage_change_df %>%
mutate(year = year(date))
percentage_change_df <- percentage_change_df %>%
mutate(month = month(date))
percentage_change_df
percentage_change_df %>% select(month)
percentage_change_df <- percentage_change_df %>%
mutate(price = as.numeric(price))
annual_prices <- percentage_change_df %>%
group_by(year, commodity, market) %>%
summarise(annual_avg_price = mean(price, na.rm = TRUE)) %>%
ungroup()
annual_prices
annual_prices %>% flextable()
summarise(annual_avg_price = round(mean(price, na.rm = TRUE),2) %>%
annual_prices %>% flextable()
annual_prices <- percentage_change_df %>%
annual_prices <- percentage_change_df %>%
group_by(year, commodity, market) %>%
summarise(annual_avg_price = round(mean(price, na.rm = TRUE),2)) %>% ungroup()
summarise(annual_avg_price = round(mean(price, na.rm = TRUE,2)) %>% ungroup()
annual_prices %>% flextable()
percentage_change_df %>%
group_by(year, commodity, market) %>%
summarise(annual_avg_price = round(mean(price, na.rm = TRUE,2)) %>% ungroup()
percentage_change_df %>%
percentage_change_df <- percentage_change_df %>%
mutate(price = as.numeric(price))
annual_prices <- percentage_change_df %>%
group_by(year, commodity, market) %>%
summarise(annual_avg_price = round(mean(price, na.rm = TRUE,2))) %>% ungroup()
annual_prices %>% flextable()
percentage_change_df %>%
group_by(year, commodity, market) %>%
summarise(annual_avg_price = round(mean(price, na.rm = TRUE),2)) %>% ungroup()
annual_prices <- percentage_change_df %>%
group_by(year, commodity, market) %>%
summarise(annual_avg_price = round(mean(price, na.rm = TRUE),2)) %>% ungroup()
annual_prices %>% flextable()
p_load(tidyverse, dplyr, readxl, flextable, lubridate)
annual_prices <- percentage_change_df %>%
group_by(year, commodity, market) %>%
summarise(annual_avg_price = round(mean(price, na.rm = TRUE),2)) %>% ungroup()
annual_prices %>% flextable()
print(annual_prices)
percentage_change_df <- percentage_change_df %>%
left_join(annual_prices, by = c("year", "commodity", "market"))
percentage_change_df
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = ((price - annual_avg_price) / annual_avg_price) * 100)
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = ((price - annual_avg_price) / annual_avg_price) * 100)
percentage_change_df %>% select(percentage_change)
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = round((price - annual_avg_price) / annual_avg_price) * 100,2))
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = round((price - annual_avg_price) / annual_avg_price) * 100,2)))
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = round((price - annual_avg_price)/annual_avg_price) * 100, 2))))
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = round((price - annual_avg_price)/annual_avg_price) * 100, 2)))
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = (price - annual_avg_price)/annual_avg_price) * 100, 2))
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = (price - annual_avg_price)/annual_avg_price) * 100))
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = (price - annual_avg_price)/annual_avg_price) * 100)
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = (price - annual_avg_price)/annual_avg_price * 100))
percentage_change_df <- percentage_change_df %>%
mutate(percentage_change = ((price - annual_avg_price)/annual_avg_price * 100))
percentage_change_df %>% select(percentage_change)
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
insert_dataframe_to_db <- function(conn, df, table_name) {
dbWriteTable(conn, table_name, df, append = TRUE, row.names = FALSE)
}
conn <- dbConnect(RSQLite::SQLite(), dbname = 'your_database.sqlite')
insert_dataframe_to_db(conn, percentage_change_df, 'WFP_PRICE_DATA_PROCESSED')
conn <- dbConnect(RSQLite::SQLite(), dbname = 'your_database.sqlite')
cpi_df <- read_csv(here("data/CPI.csv"))
p_load(tidyverse, dplyr, readxl, flextable, lubridate, here)
cpi_df <- read_csv(here("data/CPI.csv"))
dbname="dbname"
host='my-redshift-url.amazon.com'
port='5439'
user='admin'
password='Q3aikjweEVYoox6yyZhi'
# Save the driver into a directory
dir.create('~/.redshiftTools')
download.file('http://s3.amazonaws.com/redshift-downloads/drivers/RedshiftJDBC41-1.1.9.1009.jar','~/.redshiftTools/redshift-driver.jar')
install.packages('RJDBC')
suppressPackageStartupMessages(library(RJDBC))
# Use Redshift driver
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "~/.redshiftTools/redshift-driver.jar", identifier.quote="`")
# Create connection
url <- sprintf("nepal-dashboard-db.c5nzpjrxfrcj.us-east-1.rds.amazonaws.com", host, port, dbname)
jconn <- dbConnect(driver, nepal-dashboard-db.c5nzpjrxfrcj.us-east-1.rds.amazonaws.com, admin, Q3aikjweEVYoox6yyZhi)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(pacman)
p_load(tidyverse, dplyr, readxl, flextable, lubridate, here)
library(odbc) # Contains drivers to connect a database
library(DBI)  # Contains function to interact with database
library(RSQLite)
library(dbplyr)
library(dplyr)
#portaldb <- dbConnect()
con ï¼œ- DBI::dbConnect(drv = odbc::odbc(),
csv_data <- read.csv("https://data.humdata.org/dataset/0e8b1b84-8e55-4aec-bc45-0c7d2c92d32e/resource/10bae3d7-82bf-4caf-a216-5fb4a8ff6e43/download/wfp_food_prices_npl.csv")
csv_data <- read.csv("https://data.humdata.org/dataset/0e8b1b84-8e55-4aec-bc45-0c7d2c92d32e/resource/10bae3d7-82bf-4caf-a216-5fb4a8ff6e43/download/wfp_food_prices_npl.csv")
```
data <- csv_data
rm(csv_data)
View(data)
4
data %>% filter(date >= "2024-04-15")
data %>% filter(date >= "2024-05-15")
data %>% filter(date >= "2024-06-15")
data %>% filter(date >= "2024-05-15")
data %>% filter(date >= "2024-05-15")
data %>% filter(date >= "2023-05-15")
data %>% filter(date == "2023-05-15" | date == "2024-05-15" |date == "2024-04-15")
today()
today() - 2
today() - 2024-02-15
today() - "2024-02-15"
today() - as.Date(2024-02-15)
data %>% filter(date == "2023-05-15" | date == "2024-05-15" |date == "2024-04-15")
### WFP Analysis Concise for June
###WFP Analysis
rm(list = ls())
library(dplyr)
library(tidyverse)
library(readxl)
library(writexl)
library(mice)
library(lubridate)
setwd("C:/Users/IIDS/OneDrive - Institute for Integrated Development Studies/Desktop/R Studio/Analysis for June")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(readxl)
library(writexl)
library(mice)
library(lubridate)
csv_data <- read.csv("https://data.humdata.org/dataset/0e8b1b84-8e55-4aec-bc45-0c7d2c92d32e/resource/10bae3d7-82bf-4caf-a216-5fb4a8ff6e43/download/wfp_food_prices_npl.csv")
data <- csv_data
rm(csv_data)
data <- data[-1, ]
datacol <- data %>% select(date, admin1, admin2, market, commodity, priceflag, unit, price) %>% filter(date == "2024-05-15" |
date == "2023-05-15" |
date == "2024-04-15") %>% filter(priceflag == "actual")
priceflag, unit, price) %>% filter(admin1 == "Province No. 7" | admin1 == "Province No. 7" |admin1 == "Province No. 7") %>% filter(priceflag == "actual")
datacol$price <- as.numeric(datacol$price)
#character to date
datacol$date <- ymd(datacol$date)
data2024April1 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 1") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov1mean2024April = mean(price)) %>% rename(admin1prov1 = admin1)
data2024April1 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 1") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov1mean2024April = mean(price)) %>% rename(admin1prov1 = admin1) %>% flextable()
data2024April1 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 1") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov1mean2024April = mean(price)) %>% rename(admin1prov1 = admin1)
data2024April1 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 1") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov1mean2024April = mean(price)) %>% rename(admin1prov1 = admin1)
View(data2024April1)
data2024April1 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 1") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov1mean2024April = mean(price)) %>% rename(admin1prov1 = admin1)
#Prov1
data2024April1 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 1") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov1mean2024April = mean(price)) %>% rename(admin1prov1 = admin1)
##Prov2
data2024April2 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 2") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov2mean2024April = mean(price)) %>% rename(admin1prov2 = admin1)
##Prov3
data2024April3 <- datacol  %>% filter(date == "2024-04-15",
admin1 == "Province No. 3") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>% summarise(prov3mean2024April = mean(price)) %>%
rename(admin1prov3 = admin1)
##Prov4
data2024April4 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 4") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>% summarise(prov4mean2024April = mean(price)) %>%
rename(admin1prov4 = admin1)
##Prov5
data2024April5 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 5") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>% group_by(admin1, commodity) %>%
summarise(prov5mean2024April = mean(price)) %>% rename(admin1prov5 = admin1)
##Prov6
data2024April6 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 6") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>% group_by(admin1, commodity) %>%
summarise(prov6mean2024April = mean(price)) %>% rename(admin1prov6 = admin1)
##Prov7
data2024April7 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 7") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>% group_by(admin1, commodity) %>%
summarise(prov7mean2024April = mean(price)) %>% rename(admin7prov7 = admin1)
#Prov1
data2024April1 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 1") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov1mean2024April = mean(price)) %>% rename(admin1prov1 = admin1)
##Prov2
data2024April2 <- datacol  %>%
filter(date == "2024-04-15", admin1 == "Province No. 2") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>%
summarise(prov2mean2024April = mean(price)) %>% rename(admin1prov2 = admin1)
##Prov3
data2024April3 <- datacol  %>% filter(date == "2024-04-15",
admin1 == "Province No. 3") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>% summarise(prov3mean2024April = mean(price)) %>%
rename(admin1prov3 = admin1)
##Prov4
data2024April4 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 4") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>%
group_by(admin1, commodity) %>% summarise(prov4mean2024April = mean(price)) %>%
rename(admin1prov4 = admin1)
##Prov5
data2024April5 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 5") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>% group_by(admin1, commodity) %>%
summarise(prov5mean2024April = mean(price)) %>% rename(admin1prov5 = admin1)
##Prov6
data2024April6 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 6") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>% group_by(admin1, commodity) %>%
summarise(prov6mean2024April = mean(price)) %>% rename(admin1prov6 = admin1)
##Prov7
data2024April7 <- datacol  %>% filter(date == "2024-04-15", admin1 == "Province No. 7") %>%
select(date, admin1, commodity, priceflag, unit, price)  %>% group_by(admin1, commodity) %>%
summarise(prov7mean2024April = mean(price)) %>% rename(admin7prov7 = admin1)
# For western provinces and Nepal April 2024
data2024Aprilwp <- datacol %>%
select(date, admin1, admin2, market, commodity, priceflag, unit, price)  %>%
filter(date == "2024-04-15") %>%
filter(admin1 == "Province No. 7" | admin1 == "Province No. 6" |
admin1 == "Province No. 5") %>% filter(priceflag == "actual") %>%
select(date, admin1, commodity, priceflag, unit, price) %>%
group_by(commodity) %>% summarise(wpmean2024April = mean(price))
data2024AprilNpl <- datacol %>%
select(date, admin1, admin2, market, commodity, priceflag, unit, price)  %>%
filter(date == "2024-04-15") %>% filter(priceflag == "actual") %>%
select(date, admin1, commodity, priceflag, unit, price) %>%
group_by(commodity) %>% summarise(Nplmean2024April = mean(price))
